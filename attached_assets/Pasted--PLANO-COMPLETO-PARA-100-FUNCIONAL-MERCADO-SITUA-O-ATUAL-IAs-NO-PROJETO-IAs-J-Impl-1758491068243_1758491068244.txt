üöÄ PLANO COMPLETO PARA 100% FUNCIONAL (MERCADO)
üìã SITUA√á√ÉO ATUAL - IAs NO PROJETO:
ü§ñ IAs J√° Implementadas:
DoceBot Pro (Chat IA) - src/pages/AiAssistantPage.tsx

Knowledge base especializada para confeitaria
200+ pares de perguntas/respostas
Sistema de cr√©ditos funcional
Calculadora Avan√ßada com IA - src/pages/AdvancedCalculatorPage.tsx

An√°lise de fotos simulada
Sugest√µes inteligentes de pre√ßos
Cen√°rios de neg√≥cio
Sistema de Cr√©ditos IA - src/utils/creditsManager.ts

Planos: Free (30), Starter (100), Pro (ilimitado)
Controle de uso mensal
OCR Financeiro Simulado - src/pages/FinanceiroPage.tsx

Extra√ß√£o de dados de comprovantes
Processamento autom√°tico de notas fiscais
üöß IAs Para Implementar:
Gemini Service - src/services/geminiService.ts (parcial)
An√°lise de Despesas IA - src/pages/RelatoriosPage.tsx
Importa√ß√£o IA de Clientes - WhatsApp/CSV
OCR de Receitas - src/components/RecipeOCR.tsx
üéØ PLANO DE IMPLEMENTA√á√ÉO ESTRUTURADO:
FASE 1: INFRAESTRUTURA BACKEND (Supabase)
1.1 Setup Supabase
# Integra√ß√£o necess√°ria
- Supabase Auth & Database
- Row Level Security (RLS)
- Storage para imagens
- Edge Functions para IAs
1.2 Migra√ß√£o de Dados
-- J√° temos alguns schemas em supabase/migrations/
-- Precisa completar e sincronizar com types/index.ts
- Usu√°rios e perfis
- Receitas e ingredientes  
- Transa√ß√µes financeiras
- Gastos fixos e planejados
- Or√ßamentos e clientes
1.3 Configura√ß√£o RLS
-- Pol√≠ticas de seguran√ßa para cada tabela
-- Usu√°rios s√≥ acessam seus pr√≥prios dados
FASE 2: INTEGRA√á√ÉO CLOUDINARY
2.1 Setup Cloudinary
// Substituir simula√ß√µes por upload real:
- Logo uploads (perfil, cat√°logo)
- Fotos de receitas
- Comprovantes financeiros  
- An√°lise OCR de imagens
2.2 Componente de Upload
// src/components/CloudinaryUpload.tsx
- Upload direto para Cloudinary
- Resize autom√°tico
- URLs otimizadas
FASE 3: IAs FUNCIONAIS (Google AI)
3.1 Gemini Integration
// src/services/geminiService.ts - COMPLETAR
export const geminiServices = {
  // ‚úÖ J√° configurado: analyzeBusinessExpenses
  analyzeRecipePhoto: (imageUrl: string) => {}, // OCR receitas
  extractReceiptData: (imageUrl: string) => {}, // OCR financeiro  
  generateRecipeSuggestions: (ingredients: string[]) => {},
  optimizePricing: (recipe: Receita, market: string) => {},
  parseClientData: (text: string) => {} // WhatsApp import
}
3.2 Sistema de Cr√©ditos Real
// Conectar com Supabase para tracking real
- Consumo por usu√°rio
- Reset mensal autom√°tico
- Upgrade autom√°tico de planos
3.3 DoceBot Pro - Upgrade
// Melhorar knowledge base:
- Conectar com Gemini para respostas din√¢micas
- Aprendizado baseado no perfil do usu√°rio
- Contexto das receitas/or√ßamentos do usu√°rio
FASE 4: AUTENTICA√á√ÉO & PAGAMENTOS
4.1 Supabase Auth
// Substituir localStorage auth por Supabase Auth
- Google OAuth
- Email/Password
- Magic Links
- Session management
4.2 Sistema de Pagamentos
// Integra√ß√£o Stripe (usando Replit Integration)
- Assinaturas recorrentes
- Webhooks para upgrade autom√°tico
- Portal do cliente
FASE 5: FEATURES AVAN√áADAS
5.1 Marketplace E-books Real
// src/pages/MarketplacePage.tsx
- Backend para compras
- Download real de PDFs
- Sistema de avalia√ß√µes
5.2 Cat√°logo P√∫blico Funcional
// src/pages/CustomCatalogPage.tsx
- URLs p√∫blicas reais
- SEO otimizado
- Integra√ß√£o WhatsApp Business
5.3 Sistema de Backup
// Backup autom√°tico para Supabase
- Sincroniza√ß√£o cross-device
- Recupera√ß√£o de dados
üîß IMPLEMENTA√á√ÉO T√âCNICA:
Depend√™ncias para Adicionar:
{
  "@supabase/supabase-js": "^2.x",
  "@google/generative-ai": "^0.x", // J√° instalado
  "cloudinary": "^1.x",
  "@stripe/stripe-js": "^2.x",
  "react-query": "^3.x", // Para cache de dados
  "zod": "^3.x" // J√° instalado - valida√ß√£o
}
Integra√ß√µes Replit Necess√°rias:
# Usar search_integrations para:
1. Supabase Connection
2. Stripe Payment Processing  
3. Google AI (Gemini)
4. Cloudinary Media
Environment Variables:
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
VITE_CLOUDINARY_CLOUD_NAME=
VITE_CLOUDINARY_UPLOAD_PRESET=
VITE_GOOGLE_AI_API_KEY=
STRIPE_PUBLISHABLE_KEY=
‚è±Ô∏è CRONOGRAMA ESTIMADO:
Fase 1 (Backend): 2-3 dias
Fase 2 (Cloudinary): 1 dia
Fase 3 (IAs): 3-4 dias
Fase 4 (Auth/Payment): 2-3 dias
Fase 5 (Features): 2-3 dias
Total: ~10-14 dias para aplica√ß√£o 100% market-ready

üéØ RESULTADO FINAL:
‚úÖ Banco de dados real (Supabase)
‚úÖ Upload de imagens (Cloudinary)
‚úÖ IAs funcionais (Gemini)
‚úÖ Autentica√ß√£o segura
‚úÖ Pagamentos recorrentes
‚úÖ Todas as features operacionais
‚úÖ Pronto para deploy em produ√ß√£o
