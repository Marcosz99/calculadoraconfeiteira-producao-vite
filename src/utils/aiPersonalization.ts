// Sistema de personaliza√ß√£o para DoceBot Pro

import { KnowledgeItem } from '../data/knowledge-base'
import { SearchResult } from './aiSearch'

export interface UserContext {
  nome?: string
  nivel?: 'iniciante' | 'intermediario' | 'avancado'
  especialidades?: string[]
  receitas?: string[]
  preferencias?: string[]
}

// Personalizar resposta da IA baseada no contexto do usu√°rio
export function personalizeAIResponse(
  searchResult: SearchResult,
  userQuestion: string,
  userContext: UserContext = {}
): string {
  const { nome = 'Confeiteiro(a)', nivel = 'iniciante', especialidades = [], receitas = [] } = userContext
  
  if (!searchResult.answer) {
    return generatePersonalizedFallback(nome, nivel, especialidades)
  }

  const baseResponse = searchResult.answer.resposta
  const personalizedIntro = generatePersonalizedIntro(nome, nivel, userQuestion)
  const adaptedResponse = adaptResponseToLevel(baseResponse, nivel)
  const personalizedTips = generatePersonalizedTips(searchResult.answer, receitas, especialidades)
  const confidenceNote = `\n\nüí° *Esta resposta tem ${searchResult.confidence}% de precis√£o baseada na sua pergunta.*`
  
  return `${personalizedIntro}\n\n${adaptedResponse}${personalizedTips}${confidenceNote}`
}

// Gerar introdu√ß√£o personalizada
function generatePersonalizedIntro(nome: string, nivel: string, question: string): string {
  const greetings = [
    `Ol√° ${nome}! Que √≥tima pergunta!`,
    `Oi ${nome}! Vou te ajudar com isso.`,
    `${nome}, essa √© uma excelente d√∫vida!`,
    `Perfeito, ${nome}! Vamos esclarecer isso.`
  ]
  
  const levelComments = {
    iniciante: 'Como voc√™ est√° come√ßando na confeitaria, vou explicar de forma bem did√°tica:',
    intermediario: 'Com sua experi√™ncia, voc√™ certamente vai aproveitar essas dicas:',
    avancado: 'Para algu√©m do seu n√≠vel, aqui est√£o os detalhes t√©cnicos:'
  }
  
  const greeting = greetings[Math.floor(Math.random() * greetings.length)]
  const levelComment = levelComments[nivel as keyof typeof levelComments] || levelComments.iniciante
  
  return `${greeting} ${levelComment}`
}

// Adaptar resposta ao n√≠vel do usu√°rio
function adaptResponseToLevel(response: string, nivel: string): string {
  switch (nivel) {
    case 'iniciante':
      return response + '\n\nüìö *Dica para iniciantes: Pratique bastante e n√£o tenha medo de errar. Cada erro √© um aprendizado!*'
    
    case 'intermediario':
      return response + '\n\n‚ö° *Dica pro: Experimente variar ingredientes e t√©cnicas para criar sua assinatura √∫nica.*'
    
    case 'avancado':
      return response + '\n\nüéØ *Para experts: Considere os aspectos cient√≠ficos como pH, temperatura e rea√ß√µes qu√≠micas para resultados perfeitos.*'
    
    default:
      return response
  }
}

// Gerar dicas personalizadas baseadas no perfil
function generatePersonalizedTips(
  answer: KnowledgeItem,
  userRecipes: string[],
  specialties: string[]
): string {
  const tips: string[] = []
  
  // Dicas baseadas nas especialidades do usu√°rio
  if (specialties.length > 0) {
    const relevantSpecialty = specialties.find(s => 
      answer.tags.some(tag => tag.includes(s.toLowerCase())) ||
      answer.palavrasChave.some(keyword => keyword.includes(s.toLowerCase()))
    )
    
    if (relevantSpecialty) {
      tips.push(`\nüî• *Conectando com sua especialidade em ${relevantSpecialty}: Esta t√©cnica vai elevar ainda mais seus ${relevantSpecialty}!*`)
    }
  }
  
  // Dicas baseadas nas receitas do usu√°rio
  if (userRecipes.length > 0) {
    const relatedRecipe = userRecipes.find(recipe =>
      answer.tags.some(tag => recipe.toLowerCase().includes(tag)) ||
      answer.palavrasChave.some(keyword => recipe.toLowerCase().includes(keyword))
    )
    
    if (relatedRecipe) {
      tips.push(`\nüí° *Aplicando em suas receitas: Voc√™ pode usar essa dica na sua receita de ${relatedRecipe}.*`)
    }
  }
  
  // Dicas baseadas na categoria
  const categoryTips = {
    precificacao: '\nüí∞ *Lembre-se: Um pre√ßo justo valoriza seu trabalho e garante a sustentabilidade do neg√≥cio.*',
    tecnicas: '\nüë©‚Äçüç≥ *Pr√°tica leva √† perfei√ß√£o: Anote suas observa√ß√µes para aprimorar cada vez mais.*',
    ingredientes: '\nü•Ñ *Qualidade dos ingredientes √© investimento: Bons ingredientes fazem toda a diferen√ßa no resultado final.*',
    marketing: '\nüì± *Consist√™ncia √© chave: Mantenha sua presen√ßa online ativa e aut√™ntica.*'
  }
  
  const categoryTip = categoryTips[answer.categoria as keyof typeof categoryTips]
  if (categoryTip) {
    tips.push(categoryTip)
  }
  
  return tips.join('')
}

// Gerar resposta de fallback personalizada
function generatePersonalizedFallback(
  nome: string,
  nivel: string,
  especialidades: string[]
): string {
  const specialtyText = especialidades.length > 0 
    ? ` Vejo que voc√™ trabalha com ${especialidades.join(', ')}, que tal algumas dicas espec√≠ficas?`
    : ''
  
  const levelText = {
    iniciante: 'Como voc√™ est√° come√ßando, sugiro focar primeiro nos fundamentos.',
    intermediario: 'Com sua experi√™ncia, voc√™ pode explorar t√©cnicas mais avan√ßadas.',
    avancado: 'Para algu√©m do seu n√≠vel, que tal experimentar inova√ß√µes na confeitaria?'
  }
  
  return `Ol√° ${nome}! N√£o encontrei uma resposta espec√≠fica para sua pergunta, mas estou aqui para ajudar!${specialtyText}

${levelText[nivel as keyof typeof levelText] || levelText.iniciante}

üç∞ **Que tal perguntar sobre:**
‚Ä¢ Como calcular pre√ßos de doces
‚Ä¢ T√©cnicas de preparo e decora√ß√£o  
‚Ä¢ Dicas sobre ingredientes
‚Ä¢ Estrat√©gias de marketing para confeitaria

Estou aqui para te ajudar a crescer na confeitaria! Qual sua pr√≥xima d√∫vida?`
}

// Obter contexto do usu√°rio do localStorage (mock)
export function getUserContext(): UserContext {
  try {
    const stored = localStorage.getItem('doce_calc_user_context')
    if (stored) {
      return JSON.parse(stored)
    }
  } catch (error) {
    console.error('Erro ao carregar contexto do usu√°rio:', error)
  }
  
  // Contexto padr√£o simulado
  return {
    nome: 'Confeiteiro(a)',
    nivel: 'iniciante',
    especialidades: ['brigadeiros', 'bolos'],
    receitas: ['Brigadeiro Gourmet', 'Bolo de Chocolate', 'Torta de Lim√£o'],
    preferencias: ['doces cremosos', 'decora√ß√£o simples']
  }
}

// Salvar contexto do usu√°rio
export function saveUserContext(context: UserContext): void {
  try {
    localStorage.setItem('doce_calc_user_context', JSON.stringify(context))
  } catch (error) {
    console.error('Erro ao salvar contexto do usu√°rio:', error)
  }
}

// Gerar sugest√µes de perguntas baseadas no perfil
export function generatePersonalizedSuggestions(userContext: UserContext): string[] {
  const { nivel, especialidades, receitas } = userContext
  
  const suggestions: string[] = []
  
  // Sugest√µes baseadas no n√≠vel
  const levelSuggestions = {
    iniciante: [
      'Quais equipamentos b√°sicos preciso para come√ßar?',
      'Como calcular meu primeiro pre√ßo?',
      'Qual a diferen√ßa entre a√ß√∫car cristal e refinado?'
    ],
    intermediario: [
      'Como fazer brigadeiro gourmet que vende bem?',
      'Qual a melhor forma de precificar bolos decorados?',
      'Como expandir minha clientela?'
    ],
    avancado: [
      'T√©cnicas avan√ßadas de temperar chocolate',
      'Como otimizar custos sem perder qualidade?',
      'Estrat√©gias de marketing digital para confeitaria'
    ]
  }
  
  suggestions.push(...(levelSuggestions[nivel as keyof typeof levelSuggestions] || levelSuggestions.iniciante))
  
  // Sugest√µes baseadas em especialidades
  if (especialidades?.includes('brigadeiros')) {
    suggestions.push('Como fazer brigadeiro que n√£o gruda na m√£o?')
  }
  if (especialidades?.includes('bolos')) {
    suggestions.push('Por que meu bolo afunda no meio?')
  }
  
  return suggestions.slice(0, 5)
}